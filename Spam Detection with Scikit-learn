# ðŸ“Œ Spam Email Detection using Scikit-learn

# Step 1: Import Libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Step 2: Load Dataset
# Dataset link: https://archive.ics.uci.edu/ml/datasets/SMS+Spam+Collection
df = pd.read_csv("spam.csv", encoding="latin-1")[['v1', 'v2']]
df.columns = ['label', 'message']

# Preview data
df.head()

# Step 3: Preprocess Data
df['label'] = df['label'].map({'ham': 0, 'spam': 1})
print(df['label'].value_counts())

# Step 4: Split Data
X_train, X_test, y_train, y_test = train_test_split(
    df['message'], df['label'], test_size=0.2, random_state=42
)

# Step 5: Convert Text to Features using TF-IDF
vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Step 6: Train Model
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Step 7: Predictions
y_pred = model.predict(X_test_tfidf)

# Step 8: Evaluation
print("âœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“Š Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nðŸ“„ Classification Report:\n", classification_report(y_test, y_pred))

# Step 9: Visualize Confusion Matrix
plt.figure(figsize=(6,4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Blues", xticklabels=["Ham","Spam"], yticklabels=["Ham","Spam"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix - Spam Detection")
plt.show()

# Step 10: Test with a custom message
sample = ["Congratulations! You have won a free lottery ticket. Call now."]
sample_tfidf = vectorizer.transform(sample)
prediction = model.predict(sample_tfidf)
print("\nðŸ”® Prediction for sample:", "Spam" if prediction[0] else "Ham")
